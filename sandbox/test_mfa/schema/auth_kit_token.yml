openapi: 3.0.3
info:
  title: DRF Auth Kit API Documentation
  version: 1.0.0
  description: DRF Auth Kit OpenAPI specification
paths:
  /auth/login/:
    post:
      operationId: login_create
      description: First step of MFA-enabled authentication. Validates credentials
        and initiates MFA flow. Returns ephemeral token for MFA verification or complete
        DRF authentication token if MFA is disabled. MFA code expires in 900 seconds.
      tags:
      - login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MFAFirstStepRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MFAFirstStepRequest'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FirstStepResponse'
          description: ''
  /auth/login/change-method/:
    post:
      operationId: login_change_method_create
      description: Switch to a different MFA method during authentication flow. Requires
        valid ephemeral token from first step authentication. New ephemeral token
        expires in 900 seconds.
      tags:
      - login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MFAChangeMethodRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MFAChangeMethodRequest'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MFAChangeMethod'
          description: ''
  /auth/login/resend/:
    post:
      operationId: login_resend_create
      description: Resend MFA verification code using existing ephemeral token. Only
        applicable for methods that require code dispatch (e.g., email). New ephemeral
        token expires in 900 seconds.
      tags:
      - login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MFAResendRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MFAResendRequest'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MFAResend'
          description: ''
  /auth/login/verify/:
    post:
      operationId: login_verify_create
      description: Complete MFA authentication using verification code and ephemeral
        token. Returns user details along with a DRF authentication token for API
        access. Authentication cookies are set automatically for secure token storage.
        Supports both TOTP codes and backup codes for verification.
      tags:
      - login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MFASecondStepRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MFASecondStepRequest'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MFASecondStep'
          description: ''
  /auth/logout/:
    post:
      operationId: logout_create
      description: Logout user and invalidate authentication tokens. Deletes the DRF
        authentication token from the database. Clears authentication cookies from
        the browser. Requires authentication to ensure only valid sessions can be
        logged out.
      tags:
      - logout
      security:
      - TokenAuthentication: []
        TokenCookieAuthentication: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthKitLogout'
          description: ''
  /auth/mfa/:
    get:
      operationId: mfa_list
      description: List all available MFA methods with their setup and activation
        status. Shows which methods are configured, active, and set as primary.
      tags:
      - mfa
      security:
      - TokenAuthentication: []
        TokenCookieAuthentication: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MFAMethodConfig'
          description: ''
    post:
      operationId: mfa_create
      description: Initialize a new MFA method setup. Creates the method with backup
        codes and returns setup instructions (e.g., QR code for authenticator apps).
        Method must be confirmed before activation.
      tags:
      - mfa
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MFAMethodCreateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MFAMethodCreateRequest'
        required: true
      security:
      - TokenAuthentication: []
        TokenCookieAuthentication: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MFAMethodCreate'
          description: ''
  /auth/mfa/confirm/:
    post:
      operationId: mfa_confirm_create
      description: Confirm and activate a newly created MFA method using verification
        code. Automatically sets as primary method if no other primary method exists.
        Required before the method can be used for authentication.
      tags:
      - mfa
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MFAMethodConfirmRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MFAMethodConfirmRequest'
        required: true
      security:
      - TokenAuthentication: []
        TokenCookieAuthentication: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MFAMethodConfirm'
          description: ''
  /auth/mfa/deactivate/:
    post:
      operationId: mfa_deactivate_create
      description: Deactivate an active MFA method. Requires verification code from
        the method itself. Cannot deactivate primary methods - set another method
        as primary first.
      tags:
      - mfa
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MFAMethodDeactivateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MFAMethodDeactivateRequest'
        required: true
      security:
      - TokenAuthentication: []
        TokenCookieAuthentication: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MFAMethodDeactivate'
          description: ''
  /auth/mfa/delete/:
    post:
      operationId: mfa_delete_create
      description: Permanently delete an MFA method. This action cannot be undone.
      tags:
      - mfa
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MFAMethodDeleteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MFAMethodDeleteRequest'
        required: true
      security:
      - TokenAuthentication: []
        TokenCookieAuthentication: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MFAMethodDelete'
          description: ''
  /auth/mfa/primary/:
    post:
      operationId: mfa_primary_create
      description: Set an active MFA method as the primary authentication method.
        Primary method is used by default during login flow. Only one method can be
        primary at a time.
      tags:
      - mfa
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MFAMethodPrimaryUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MFAMethodPrimaryUpdateRequest'
        required: true
      security:
      - TokenAuthentication: []
        TokenCookieAuthentication: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MFAMethodPrimaryUpdate'
          description: ''
  /auth/mfa/send/:
    post:
      operationId: mfa_send_create
      description: Send verification code for methods that support code dispatch.
        Useful for testing method configuration or manual code requests.
      tags:
      - mfa
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MFAMethodSendCodeRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MFAMethodSendCodeRequest'
        required: true
      security:
      - TokenAuthentication: []
        TokenCookieAuthentication: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MFAMethodSendCode'
          description: ''
  /auth/password/change/:
    post:
      operationId: password_change_create
      description: 'Change the current user''s password. Requires authentication. '
      tags:
      - password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
        required: true
      security:
      - TokenAuthentication: []
        TokenCookieAuthentication: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordChange'
          description: ''
  /auth/password/reset/:
    post:
      operationId: password_reset_create
      description: Send password reset instructions to the provided email address.
        If the email is registered, a secure reset link will be sent. The link expires
        after a limited time for security.
      tags:
      - password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordReset'
          description: ''
  /auth/password/reset/confirm/:
    post:
      operationId: password_reset_confirm_create
      description: Complete the password reset process using the token from the reset
        email. Requires the UID and token from the email along with the new password.
        The token is single-use and expires for security.
      tags:
      - password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirmRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirmRequest'
        required: true
      security:
      - TokenAuthentication: []
        TokenCookieAuthentication: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetConfirm'
          description: ''
  /auth/registration/:
    post:
      operationId: registration_create
      description: Register a new user account. Users must verify their email address
        before the account is fully activated.
      tags:
      - registration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Register'
          description: ''
  /auth/registration/resend-email/:
    post:
      operationId: registration_resend_email_create
      description: Send a new email verification message to unverified email addresses.
        Only works for email addresses that are registered but not yet verified.
      tags:
      - registration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResendEmailVerificationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResendEmailVerificationRequest'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResendEmailVerification'
          description: ''
  /auth/registration/verify-email/:
    get:
      operationId: registration_verify_email_retrieve
      description: GET method not allowed for email verification.
      tags:
      - registration
      security:
      - {}
      responses:
        '405':
          description: Method not allowed
    post:
      operationId: registration_verify_email_create
      description: Confirm email address using the verification key sent via email.
        This activates the user account and allows login access.
      tags:
      - registration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmailRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VerifyEmailRequest'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyEmail'
          description: ''
  /auth/user/:
    get:
      operationId: user_retrieve
      description: Retrieve the authenticated user's profile information including
        username, email, first name, and last name. Password fields are excluded.
      tags:
      - user
      security:
      - TokenAuthentication: []
        TokenCookieAuthentication: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
    put:
      operationId: user_update
      description: Update the authenticated user's profile information. Allows modification
        of username, first name, and last name. Email field is read-only for security.
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDetailsRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserDetailsRequest'
        required: true
      security:
      - TokenAuthentication: []
        TokenCookieAuthentication: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
    patch:
      operationId: user_partial_update
      description: Partially update the authenticated user's profile information.
        Only provided fields will be updated. Email field is read-only.
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserDetailsRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserDetailsRequest'
      security:
      - TokenAuthentication: []
        TokenCookieAuthentication: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
components:
  schemas:
    AppSetup:
      type: object
      description: Serializer for authenticator app setup response.
      properties:
        qr_link:
          type: string
          readOnly: true
    AuthKitLogout:
      type: object
      description: Logout confirmation for token-based authentication.
      properties:
        detail:
          type: string
          readOnly: true
    FirstStepResponse:
      oneOf:
      - $ref: '#/components/schemas/MFAFirstStepResponse'
      - $ref: '#/components/schemas/NoMFALoginResponse'
    MFAChangeMethod:
      type: object
      description: |-
        Serializer for changing MFA method during authentication.

        Allows switching to a different MFA method using valid ephemeral token.

        Attributes:
            ephemeral_token: Current ephemeral token
            new_method: Name of new MFA method to switch to
      properties:
        ephemeral_token:
          type: string
        new_method:
          $ref: '#/components/schemas/NewMethodEnum'
      required:
      - ephemeral_token
      - new_method
    MFAChangeMethodRequest:
      type: object
      description: |-
        Serializer for changing MFA method during authentication.

        Allows switching to a different MFA method using valid ephemeral token.

        Attributes:
            ephemeral_token: Current ephemeral token
            new_method: Name of new MFA method to switch to
      properties:
        ephemeral_token:
          type: string
          minLength: 1
        new_method:
          $ref: '#/components/schemas/NewMethodEnum'
      required:
      - ephemeral_token
      - new_method
    MFAFirstStepRequest:
      type: object
      description: First step MFA authentication serializer.
      properties:
        username:
          type: string
          writeOnly: true
          minLength: 1
        password:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - password
      - username
    MFAFirstStepResponse:
      type: object
      description: |-
        Serializer for first step MFA authentication response.

        Returns ephemeral token and method information for MFA verification,
        or complete authentication response if MFA is disabled for user.

        Attributes:
            ephemeral_token: Temporary token for MFA verification
            method: Selected MFA method name
            mfa_enabled: Boolean indicating if MFA is required
      properties:
        ephemeral_token:
          type: string
          readOnly: true
        method:
          allOf:
          - $ref: '#/components/schemas/MethodEnum'
          readOnly: true
        mfa_enabled:
          type: boolean
          readOnly: true
          default: true
    MFAMethodConfig:
      type: object
      description: |-
        Serializer for MFA method configuration display.

        Shows method status and setup information for management interfaces.

        Attributes:
            name: MFA method name
            is_active: Whether method is active
            is_primary: Whether method is set as primary
            is_setup: Whether method has been configured by user
      properties:
        name:
          type: string
          readOnly: true
        is_active:
          type: boolean
          readOnly: true
          default: false
        is_primary:
          type: boolean
          readOnly: true
          default: false
        is_setup:
          type: boolean
          readOnly: true
          default: false
    MFAMethodConfirm:
      type: object
      description: |-
        Serializer for confirming and activating new MFA methods.

        Validates TOTP code and activates the method. Sets as primary
        if no other primary method exists.

        Attributes:
            method: MFA method name to confirm
            code: TOTP verification code
      properties:
        detail:
          type: string
          readOnly: true
    MFAMethodConfirmRequest:
      type: object
      description: |-
        Serializer for confirming and activating new MFA methods.

        Validates TOTP code and activates the method. Sets as primary
        if no other primary method exists.

        Attributes:
            method: MFA method name to confirm
            code: TOTP verification code
      properties:
        method:
          allOf:
          - $ref: '#/components/schemas/MethodEnum'
          writeOnly: true
        code:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - code
      - method
    MFAMethodCreate:
      type: object
      description: |-
        Serializer for creating new MFA methods.

        Initializes a new MFA method with backup codes and setup instructions.
        Method must be confirmed before activation.

        Attributes:
            method: MFA method name to create
            backup_codes: Generated backup codes for the method
            setup_data: Method-specific setup data (e.g., QR code)
      properties:
        method:
          $ref: '#/components/schemas/MethodEnum'
        backup_codes:
          type: array
          items:
            type: string
          readOnly: true
        setup_data:
          allOf:
          - $ref: '#/components/schemas/MFAMethodSetupData'
          readOnly: true
      required:
      - method
    MFAMethodCreateRequest:
      type: object
      description: |-
        Serializer for creating new MFA methods.

        Initializes a new MFA method with backup codes and setup instructions.
        Method must be confirmed before activation.

        Attributes:
            method: MFA method name to create
            backup_codes: Generated backup codes for the method
            setup_data: Method-specific setup data (e.g., QR code)
      properties:
        method:
          $ref: '#/components/schemas/MethodEnum'
      required:
      - method
    MFAMethodDeactivate:
      type: object
      description: |-
        Serializer for deactivating active MFA methods.

        Deactivates non-primary MFA methods after code verification.
        Primary methods cannot be deactivated directly.

        Attributes:
            method: MFA method name to deactivate
            code: TOTP verification code
      properties:
        detail:
          type: string
          readOnly: true
    MFAMethodDeactivateRequest:
      type: object
      description: |-
        Serializer for deactivating active MFA methods.

        Deactivates non-primary MFA methods after code verification.
        Primary methods cannot be deactivated directly.

        Attributes:
            method: MFA method name to deactivate
            code: TOTP verification code
      properties:
        method:
          allOf:
          - $ref: '#/components/schemas/MethodEnum'
          writeOnly: true
        code:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - code
      - method
    MFAMethodDelete:
      type: object
      description: |-
        Serializer for deleting MFA methods.

        Permanently removes MFA method. Behavior controlled by settings
        for deleting active/primary methods and requiring verification codes.

        Attributes:
            method: MFA method name to delete
            code: Verification code (conditional based on settings)
      properties:
        detail:
          type: string
          readOnly: true
    MFAMethodDeleteRequest:
      type: object
      description: |-
        Serializer for deleting MFA methods.

        Permanently removes MFA method. Behavior controlled by settings
        for deleting active/primary methods and requiring verification codes.

        Attributes:
            method: MFA method name to delete
            code: Verification code (conditional based on settings)
      properties:
        method:
          allOf:
          - $ref: '#/components/schemas/MethodEnum'
          writeOnly: true
      required:
      - method
    MFAMethodPrimaryUpdate:
      type: object
      description: |-
        Serializer for setting MFA method as primary.

        Updates the primary method designation. Optionally requires
        verification from current primary method based on settings.

        Attributes:
            method: MFA method name to set as primary
            primary_code: Verification code from current primary method (optional)
      properties:
        detail:
          type: string
          readOnly: true
    MFAMethodPrimaryUpdateRequest:
      type: object
      description: |-
        Serializer for setting MFA method as primary.

        Updates the primary method designation. Optionally requires
        verification from current primary method based on settings.

        Attributes:
            method: MFA method name to set as primary
            primary_code: Verification code from current primary method (optional)
      properties:
        method:
          allOf:
          - $ref: '#/components/schemas/MethodEnum'
          writeOnly: true
      required:
      - method
    MFAMethodSendCode:
      type: object
      description: |-
        Serializer for sending verification codes to MFA methods.

        Triggers code dispatch for methods that support it (e.g., email).
        Useful for testing method configuration.

        Attributes:
            method: MFA method name to send code to
      properties:
        detail:
          type: string
          readOnly: true
    MFAMethodSendCodeRequest:
      type: object
      description: |-
        Serializer for sending verification codes to MFA methods.

        Triggers code dispatch for methods that support it (e.g., email).
        Useful for testing method configuration.

        Attributes:
            method: MFA method name to send code to
      properties:
        method:
          allOf:
          - $ref: '#/components/schemas/MethodEnum'
          writeOnly: true
      required:
      - method
    MFAMethodSetupData:
      oneOf:
      - $ref: '#/components/schemas/AppSetup'
      - $ref: '#/components/schemas/SetupMethod'
    MFAMethodSetupDataRequest:
      oneOf: []
    MFAResend:
      type: object
      description: |-
        Serializer for resending MFA verification code.

        Generates and sends new verification code for current method.

        Attributes:
            ephemeral_token: Current ephemeral token
      properties:
        ephemeral_token:
          type: string
      required:
      - ephemeral_token
    MFAResendRequest:
      type: object
      description: |-
        Serializer for resending MFA verification code.

        Generates and sends new verification code for current method.

        Attributes:
            ephemeral_token: Current ephemeral token
      properties:
        ephemeral_token:
          type: string
          minLength: 1
      required:
      - ephemeral_token
    MFASecondStep:
      type: object
      description: Second step MFA authentication serializer.
      properties:
        key:
          type: string
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/UserDetails'
          readOnly: true
    MFASecondStepRequest:
      type: object
      description: Second step MFA authentication serializer.
      properties:
        ephemeral_token:
          type: string
          writeOnly: true
          minLength: 1
        code:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - code
      - ephemeral_token
    MethodEnum:
      enum:
      - app
      - email
      type: string
      description: |-
        * `app` - app
        * `email` - email
    NewMethodEnum:
      enum:
      - app
      - email
      type: string
      description: |-
        * `app` - app
        * `email` - email
    NoMFALoginResponse:
      type: object
      description: Login response serializer with MFA disabled indicator.
      properties:
        key:
          type: string
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/UserDetails'
          readOnly: true
        mfa_enabled:
          type: boolean
          readOnly: true
          default: false
    PasswordChange:
      type: object
      description: Password change for authenticated users.
      properties:
        detail:
          type: string
          readOnly: true
    PasswordChangeRequest:
      type: object
      description: Password change for authenticated users.
      properties:
        new_password1:
          type: string
          writeOnly: true
          minLength: 1
          maxLength: 128
        new_password2:
          type: string
          writeOnly: true
          minLength: 1
          maxLength: 128
      required:
      - new_password1
      - new_password2
    PasswordReset:
      type: object
      description: Password reset request with email verification.
      properties:
        detail:
          type: string
          readOnly: true
    PasswordResetConfirm:
      type: object
      description: Password reset confirmation with new password.
      properties:
        detail:
          type: string
          readOnly: true
    PasswordResetConfirmRequest:
      type: object
      description: Password reset confirmation with new password.
      properties:
        new_password1:
          type: string
          writeOnly: true
          minLength: 1
          maxLength: 128
        new_password2:
          type: string
          writeOnly: true
          minLength: 1
          maxLength: 128
        uid:
          type: string
          writeOnly: true
          minLength: 1
        token:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - new_password1
      - new_password2
      - token
      - uid
    PasswordResetRequest:
      type: object
      description: Password reset request with email verification.
      properties:
        email:
          type: string
          format: email
          writeOnly: true
          minLength: 1
      required:
      - email
    PatchedUserDetailsRequest:
      type: object
      description: User profile information and updates.
      properties:
        username:
          type: string
          minLength: 1
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
    Register:
      type: object
      description: User registration with email verification.
      properties:
        detail:
          type: string
          readOnly: true
    RegisterRequest:
      type: object
      description: User registration with email verification.
      properties:
        username:
          type: string
          writeOnly: true
          minLength: 1
        email:
          type: string
          format: email
          writeOnly: true
          minLength: 1
        password1:
          type: string
          writeOnly: true
          minLength: 1
        password2:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - email
      - password1
      - password2
      - username
    ResendEmailVerification:
      type: object
      description: Request new email verification message.
      properties:
        detail:
          type: string
          readOnly: true
    ResendEmailVerificationRequest:
      type: object
      description: Request new email verification message.
      properties:
        email:
          type: string
          format: email
          writeOnly: true
          minLength: 1
      required:
      - email
    SetupMethod:
      type: object
      description: Default serializer for MFA method initial setup responses.
      properties:
        detail:
          type: string
          readOnly: true
    UserDetails:
      type: object
      description: User profile information and updates.
      properties:
        pk:
          type: integer
          readOnly: true
          title: ID
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          readOnly: true
          title: Email address
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
      required:
      - username
    UserDetailsRequest:
      type: object
      description: User profile information and updates.
      properties:
        username:
          type: string
          minLength: 1
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
      required:
      - username
    VerifyEmail:
      type: object
      description: Email address verification with confirmation key.
      properties:
        detail:
          type: string
          readOnly: true
    VerifyEmailRequest:
      type: object
      description: Email address verification with confirmation key.
      properties:
        key:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - key
  securitySchemes:
    TokenAuthentication:
      type: http
      scheme: bearer
      bearerFormat: DRF Token
    TokenCookieAuthentication:
      type: apiKey
      in: cookie
      name: auth-token
